/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.jd522_fa2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Caitlin
 */
public class TaskManager<T> extends javax.swing.JFrame {

    private HashMap<String, ArrayList<Task<String>>> getTaskNames = new HashMap<>();

    /**
     * Creates new form TaskManager
     */
    public TaskManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("The Task Manager List");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Task Name", "Description", "Completion Status", "Category"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Save");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Update SQL");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Export");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Delete");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Update Text");
        jButton6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Enter Task Name here:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Search");
        jButton7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(147, 147, 147))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        TaskList taskList = new TaskList();
        taskList.setVisible(true);

        //close task list
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    //delete btn
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            String taskName = (String) model.getValueAt(selectedRow, 0);

            //create connection
            Connection conn = null;
            try {
                String connStr = "jdbc:sqlite:C:\\Users\\Caitlin\\SQL lite\\sqlite-tools-win32-x86-3430000\\TaskList.db;";
                Class.forName("org.sqlite.JDBC");
                conn = DriverManager.getConnection(connStr);

                System.out.println("Connected");

                String sqlQuery = "DELETE FROM TaskDetails WHERE Task = ?";
                PreparedStatement state = conn.prepareStatement(sqlQuery);
                state.setString(1, taskName);
                state.executeUpdate();

                //removes selected row
                model.removeRow(selectedRow);

                //closes connection
                state.close();
                conn.close();

                // pop up message
                JFrame popUp;
                popUp = new JFrame();
                JOptionPane.showMessageDialog(popUp, "Task successfully deleted");

            } catch (SQLException | ClassNotFoundException ex) {
                // pop up message
                JFrame popUp;
                popUp = new JFrame();
                JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    //update button for sql
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clears any existing rows

        //creatig connecion
        Connection conn = null;
        try {
            String connStr = "jdbc:sqlite:C:\\Users\\Caitlin\\SQL lite\\sqlite-tools-win32-x86-3430000\\TaskList.db;";
            Class.forName("org.sqlite.JDBC");
            conn = DriverManager.getConnection(connStr);

            System.out.println("Connected");
            //sqlQuery

            String sqlQuery = "Select * from TaskDetails";
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(sqlQuery);

            while (rs.next()) {
                String taskName = rs.getString("Task");
                String description = rs.getString("Desciption");
                String status = rs.getString("Completion");
                String cat = rs.getString("Category");

                //adds to the rows
                model.addRow(new Object[]{taskName, description, status, cat});
            }

            //closes connection
            rs.close();
            stm.close();
            conn.close();

            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Updated the table using SQL");

            //error handling
        } catch (SQLException | ClassNotFoundException ex) {
            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    //save to text file btn
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here

        //save to text file
        try ( OutputStream os = new FileOutputStream("TaskList.txt");  OutputStreamWriter osw = new OutputStreamWriter(os)) {

            //adds saved to table
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int rowCount = model.getRowCount();

            for (int i = 0; i < rowCount; i++) {
                Task<String> task = new Task<>(
                        (String) model.getValueAt(i, 0),
                        (String) model.getValueAt(i, 1),
                        (String) model.getValueAt(i, 2),
                        (String) model.getValueAt(i, 3)
                );

                String line = task.toString() + "\n";
                osw.write(line);
            }

            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Successfully saved to text file");

            //gives date and file size
            //file size
            Path filePath = Paths.get("TaskList.txt");
            long fileSize = Files.size(filePath);

            //gives date
            BasicFileAttributes date = Files.readAttributes(filePath, BasicFileAttributes.class);
            FileTime creationTime = date.creationTime();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            String formattedCreationTime = dateFormat.format(new Date(creationTime.toMillis()));

            // pop up message
            JOptionPane.showMessageDialog(popUp, "File Size: " + fileSize + " bytes" + "\n" + "Creation Time: " + formattedCreationTime);

        } catch (IOException ex) {
            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    //Exports data as cvs file btn
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //error handling
        try {
            //file path
            String filePath = "TaskListCSV.csv"; // 

            try ( BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                // column names
                writer.write("Task,Description,Completion Status,Category");
                writer.newLine();

                //get data from table
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                int rowCount = model.getRowCount();

                for (int i = 0; i < rowCount; i++) {
                    String taskName = (String) model.getValueAt(i, 0);
                    String description = (String) model.getValueAt(i, 1);
                    String status = (String) model.getValueAt(i, 2);
                    String cat = (String) model.getValueAt(i, 3);

                    String line = taskName + "," + description + "," + status + "," + cat;
                    writer.write(line);
                    writer.newLine();
                }

                // pop up message
                JFrame popUp;
                popUp = new JFrame();
                JOptionPane.showMessageDialog(popUp, "Successfully saved to CSV file");

                //error handling
            } catch (IOException ex) {
                // pop up message
                JFrame popUp;
                popUp = new JFrame();
                JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
            }
        } catch (Exception ex) {
            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    //update text file to table btn
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //read from file 
        try ( InputStream is = new FileInputStream("TaskList.txt");  InputStreamReader isr = new InputStreamReader(is);  BufferedReader reader = new BufferedReader(isr)) {

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Clear any existing rows
            String line;
            while ((line = reader.readLine()) != null) {
                String[] taskData = line.split(",");
                if (taskData.length == 4) {
                    Task<String> task = new Task<>(
                            taskData[0],
                            taskData[1],
                            taskData[2],
                            taskData[3]
                    );

                    //adds to table
                    model.addRow(new Object[]{task.getTaskName(), task.getDescription(), task.getStatus(), task.getCategory()});
                }
            }

            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Successfully updated table from text file");

            //error handling
        } catch (IOException ex) {
            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    //search button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        //makes searh lowercase
        String searchTask = jTextField1.getText().toLowerCase();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // clears any existing rows

        // check if search is empty
        if (searchTask.isEmpty()) {
            // pop up message
            JFrame popUp;
            popUp = new JFrame();
            JOptionPane.showMessageDialog(popUp, "Search Text Field Is Empty");
        } else {
            boolean foundTask = false;

            //checks if it matches the task name
            for (ArrayList<Task<String>> tasks : getTaskNames.values()) {
                for (Task<String> task : tasks) {
                    if (task.getTaskName().toLowerCase().contains(searchTask)) {
                        model.addRow(new Object[]{task.getTaskName(), task.getDescription(), task.getStatus(), task.getCategory()});
                        foundTask = true;
                    }
                }
            }

                // makes the connection
                Connection conn = null;
                try {
                    String connStr = "jdbc:sqlite:C:\\Users\\Caitlin\\SQL lite\\sqlite-tools-win32-x86-3430000\\TaskList.db;";
                    Class.forName("org.sqlite.JDBC");
                    conn = DriverManager.getConnection(connStr);

                    //checks the database for the task name
                    String sqlQuery = "SELECT * FROM TaskDetails WHERE Task LIKE ?";
                    PreparedStatement state = conn.prepareStatement(sqlQuery);
                    state.setString(1, "%" + searchTask + "%");
                    ResultSet results = state.executeQuery();

                    while (results.next()) {
                        String taskName = results.getString("Task");
                        String description = results.getString("Desciption");
                        String status = results.getString("Completion");
                        String cat = results.getString("Category");
                        model.addRow(new Object[]{taskName, description, status, cat});
                        foundTask = true;
                    }

                    //closes connection
                    results.close();
                    state.close();
                    conn.close();

                    // pop up message
                    JFrame popUp;
                    popUp = new JFrame();

                    if (!foundTask) {
                        JOptionPane.showMessageDialog(popUp, "No matches found, try again");
                    } else {
                        JOptionPane.showMessageDialog(popUp, "Successfully found Task Name");
                    }

                } catch (SQLException | ClassNotFoundException ex) {
                    // pop up message
                    JFrame popUp;
                    popUp = new JFrame();
                    JOptionPane.showMessageDialog(popUp, "Error: " + ex.getMessage());
                }
            }

                //clear serach text
                jTextField1.setText("");
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
             * @param args the command line arguments
             */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskManager().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
